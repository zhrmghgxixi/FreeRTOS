FreeRTOS任务创建与启动编程习惯：
	目前RTOS中，主要有两种比较流行的启动方式(其实就是对任务创建方式的习惯)：第一种：万事俱备，只欠东风，第二种：小心翼翼，十分谨慎



万事俱备，只欠东风方式：
	就是在在 main 函数中将硬件初始化，RTOS 系统初始化，所有任务的创建这些都弄好之后，才开启任务调度器。如下事例伪代码：
/**********************************************************************************/
	int main (void)
	{
	    /* 硬件初始化 */
 	    HardWare_Init();

	    /* RTOS 系统初始化 */
	    RTOS_Init();

	    /* 创建任务 1，但任务 1 不会执行，因为调度器还没有开启 */
	    RTOS_TaskCreate(Task1);
	    /* 创建任务 2，但任务 2 不会执行，因为调度器还没有开启 */
	    RTOS_TaskCreate(Task2);

	    /* ......继续创建各种任务 */

	    /* 启动 RTOS，开始调度 */
	    RTOS_Start();
	}
/**********************************************************************************/



小心翼翼，十分谨慎方式：
	就是在main 函数中将硬件和 RTOS 系统先初始化好，然后创建一个专门用来创建其他任务的任务后就启动调度器，然后在专门创建任务的任务里面创建各种应用任务，当所有任务都创建成功后，专门创建任务的任务把自己删除。如下事例伪代码：
/**********************************************************************************/
 	int main (void)
	{
	    /* 硬件初始化 */
	    HardWare_Init();

	    /* RTOS 系统初始化 */
	    RTOS_Init();

	    /* 创建一个任务 */
	    RTOS_TaskCreate(AppTaskCreate); 

	    /* 启动 RTOS，开始调度 */
	    RTOS_Start(); 
	}

	/* 起始任务，在里面创建任务 */
	void AppTaskCreate( void *arg )
	    {
	    /* 创建任务 1，然后执行 */
	    RTOS_TaskCreate(Task1);

	    /* 当任务 1 阻塞时，继续创建任务 2，然后执行 */
	    RTOS_TaskCreate(Task2);

	    /* ......继续创建各种任务 */

	    /* 当任务创建完成， 删除起始任务 */
	    RTOS_TaskDelete(AppTaskCreate);
	}
/**********************************************************************************/



注意：
	这两种方式都是差不多的，并没有谁比谁更优秀，更多的是个人的编程习惯，RT-Thread 和FreeRTOS 默认使用第二种，我也干脆以第二种方式为习惯来创建任务。