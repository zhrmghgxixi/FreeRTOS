FreeRTOS 的启动流程：
	在系统上电的时候第一个执行的是启动文件里面由汇编编写的复位函数Reset_Handle，复位函数的最后会调用 C 库函数__main，最后调用C中的 main 函数，从而去到 C 的世界。
	在 main()函数中，我们直接可以对 FreeRTOS 进行创建任务操作，因为 FreeRTOS 会自动帮我们做初始化的事情，比如初始化堆内存。所以我们并不用手动初始化FreeRTOS内核，执行任务创建就行。在创建完任务的时候，我们需要开启调度器，因为创建仅仅是把任务添加到系统中，还没真正调度，并且空闲任务也没实现，定时器任务也没实现，这些都是在开启调度函数vTaskStartScheduler()中实现的，FreeRTOS 一旦启动，就必须要保证系统中每时每刻都有一个任务处于运行态（Runing），并且空闲任务不可以被挂起与删除， 空闲任务的优先级是最低的，以便系统中其他任务能随时抢占空闲任务的 CPU 使用权，这些都是系统必要的东西，也无需用户自己实现， FreeRTOS 全部帮我们搞定了。

大致的启动流程：
	上电 -》复位函数Reset_Handle -》 __main -》我们写的main 函数 -》相关硬件初始化 -》创建用于创建其他任务的任务 -》启动任务调度器



知识点补充：

1、当您看到__main函数时，估计应该有不少人认为这个是main函数的别名或是编译之后的名字，否则在启动代码中再也无法找到和main相关的字眼了。可事实是，__main和main是完全两个不同的函数，并且你无法找到__main代码，因为这个是编译器自动创建的。当编译器发现定义了main函数，那么就会自动创建__main。
__main 函数的主要工作是初始化系统的堆和栈。

2、在使用专门创建任务的任务时，必须保证在创建任务时处理临界区，这是因为FreeRTOS是抢占式调度机制，一旦有比创建任务的任务优先级高的任务就会抢去CPU使用权。
	